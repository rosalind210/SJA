//
//  ArticleViewController.swift
//  SJA
//
//  Created by Rosalind Ellis on 7/15/15.
//  Copyright (c) 2015 Rosalind Ellis. All rights reserved.
//

import WebKit

class ArticleViewController: UIViewController {
    
    var webView: WKWebView!  = WKWebView()
    var chosenArticle: String?
    var articleTitle: String?
    var randomURL: String?
    var url = String()
    
    @IBOutlet weak var toolBar: UIToolbar!
    @IBOutlet weak var backButton: UIBarButtonItem!
    @IBOutlet weak var forwardButton: UIBarButtonItem!
    @IBOutlet weak var reloadButton: UIBarButtonItem!
    @IBOutlet weak var progressView: UIProgressView!
    
    var top : NSLayoutConstraint!
    
    var blurEffect = UIVisualEffectView()
    
    //FOR RANDOM ARTICLE
    @IBOutlet weak var menuContainer: UIView!
    @IBOutlet weak var menuButton: UIBarButtonItem!
    @IBOutlet weak var randomButton: UIBarButtonItem!
    
    // initializes webView with frame size zero
    override func viewDidLoad() {
        super.viewDidLoad()
        
        webView = WKWebView(frame: CGRectZero)
        
        if articleTitle != nil {
            self.title = articleTitle
        } else {
            self.title = "Random Article"
        }
        
        webView.scrollView.delegate = self
        
        // adds webview to main view below the progress view
        view.insertSubview(webView, belowSubview: progressView)
        
        // sets constraints of webview
        webView.translatesAutoresizingMaskIntoConstraints = false //disables autogenerated layout
        
        let width = NSLayoutConstraint(item: webView, attribute: .Width, relatedBy: .Equal, toItem: view, attribute: .Width, multiplier: 1, constant: 0) // define width equal to superview
        let leading = NSLayoutConstraint(item: webView, attribute: .Leading, relatedBy: .Equal, toItem: view, attribute: .Leading, multiplier: 1, constant: 0)
        top = NSLayoutConstraint(item: webView, attribute: .Top, relatedBy: .Equal, toItem: view, attribute: .Top, multiplier: 1, constant: 0)
        let trailing = NSLayoutConstraint(item: webView, attribute: .Trailing, relatedBy: .Equal, toItem: view, attribute: .Trailing, multiplier: 1, constant: 0)
        let bottom = NSLayoutConstraint(item: webView, attribute: .Bottom, relatedBy: .Equal, toItem: view, attribute: .Bottom, multiplier: 1, constant: -44)
        
        view.addConstraints([top, bottom, width, leading, trailing]) //adds constraints to view
        
        // creates and loads article link
        if chosenArticle == nil { //if this is the main screen
            url = randomArticle()
            let loadURL = NSURL(string: url)
            let requestObj = NSURLRequest(URL: loadURL!)
            webView.loadRequest(requestObj)
        } else { //if this is coming from the tvc
            url = chosenArticle!
            let loadURL = NSURL(string: url)
            let requestObj = NSURLRequest(URL: loadURL!)
            webView.loadRequest(requestObj)
        }
    }
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        
        blurEffect = UIVisualEffectView(effect: UIBlurEffect(style: .Light)) as UIVisualEffectView
        blurEffect.frame = view.bounds
        webView.addSubview(blurEffect)
        blurEffect.hidden = true
    }
    
    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)
        
        
        //TLYShyNavBar
        self.shyNavBarManager.scrollView = webView.scrollView
        
        //buttons are definitely not enabled
        backButton.enabled = false
        forwardButton.enabled = false
        
        //observers
        webView.addObserver(self, forKeyPath: "loading", options: .New, context: nil)
        webView.addObserver(self, forKeyPath: "estimatedProgress", options: .New, context: nil)
        
        if menuContainer != nil {
            menuContainer.hidden = true
        }

    }

    override func viewWillDisappear(animated: Bool) {
        super.viewWillDisappear(animated)
        webView.removeObserver(self, forKeyPath: "loading")
        webView.removeObserver(self, forKeyPath: "estimatedProgress")
        progressView?.removeFromSuperview()
        
        //hide the menu and blur after pressing topic
        if menuContainer != nil {
            menuContainer.hidden = true
            blurEffect.hidden = true
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Loading Property
    
    override func observeValueForKeyPath(keyPath: String?, ofObject object: AnyObject?, change: [String : AnyObject]?, context: UnsafeMutablePointer<Void>) {
        backButton.enabled = webView.canGoBack
        forwardButton.enabled = webView.canGoForward
        
        // updates progressView to the estimated progress
        if keyPath == "estimatedProgress" {
            progressView?.hidden = (webView.estimatedProgress == 1)
            progressView?.setProgress(Float(webView.estimatedProgress), animated: true)
        }
    }
    
    // resets progressView after each request
    func webView(webView: WKWebView!, didFinishNavigation navigation: WKNavigation!) {
        progressView.setProgress(0.0, animated: false)
        
        
    }
    
    // MARK: - Navigation Controller for opening screen
    @IBAction func menuAction() {
        if menuContainer!.hidden {
            menuContainer!.hidden = false
            blurEffect.hidden = false
        } else {
            menuContainer!.hidden = true
            blurEffect.hidden = true
        }
    }

    
    // MARK: - Toolbar Actions
    
    @IBAction func back(sender:UIBarButtonItem) {
        webView.goBack()
    }
    
    @IBAction func forward(sender:UIBarButtonItem) {
        webView.goForward()
    }
    
    @IBAction func reload(sender:UIBarButtonItem) {
        let request = NSURLRequest(URL: webView.URL!)
        webView.loadRequest(request)
    }
    
    @IBAction func back2(sender: AnyObject) {
        webView.goBack()
    }
    
    @IBAction func forward2(sender: AnyObject) {
        webView.goForward()
    }
    
    @IBAction func refresh2(sender: AnyObject) {
        let request = NSURLRequest(URL: webView.URL!)
        webView.loadRequest(request)
    }
    
    
    //MARK: -random button
    
    @IBAction func getRandomArticle() {
        url = randomArticle()
        if url != "" {
            let loadURL = NSURL(string: url)
            let requestObj = NSURLRequest(URL: loadURL!)
            webView.loadRequest(requestObj)
        } else {
            url = randomArticle()
            let loadURL = NSURL(string: url)
            let requestObj = NSURLRequest(URL: loadURL!)
            webView.loadRequest(requestObj)
        }
    }
    
    //MARK: -Share
    
    // The share button for the first view presented
    @IBAction func randomShareURL(sender: AnyObject) {
        let textToShare = "Check out this article I got from 'Voices: Social Justice Articles'! \n"
        
        if let articleLink = NSURL(string: url)
        {
            let objectsToShare = [textToShare, articleLink]
            let activityVC = UIActivityViewController(activityItems: objectsToShare, applicationActivities: nil)
            if UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiom.Phone {
                self.presentViewController(activityVC, animated: true, completion: nil)
            } else {
                let popOverController = UIPopoverController(contentViewController: activityVC)
                popOverController.presentPopoverFromRect(CGRectMake(self.view.frame.size.width/2, self.view.frame.size.height/4, 0, 0), inView: self.view, permittedArrowDirections: [], animated: true)
            }
        }
    }
    
    //share button for navigated to article
    @IBAction func chosenShareURL(sender: AnyObject) {
        let textToShare = "Check out this article I got from 'Voices: Social Justice Articles'! \n"
        
        if let articleLink = NSURL(string: url)
        {
            let objectsToShare = [textToShare, articleLink]
            let activityVC = UIActivityViewController(activityItems: objectsToShare, applicationActivities: nil)
            if UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiom.Phone {
                self.presentViewController(activityVC, animated: true, completion: nil)
            } else {
                let popOverController = UIPopoverController(contentViewController: activityVC)
                popOverController.presentPopoverFromRect(CGRectMake(self.view.frame.size.width/2, self.view.frame.size.height/4, 0, 0), inView: self.view, permittedArrowDirections: [], animated: true)
            }
        }
    }
    
    
    /*
    // MARK: - Navigation
    
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
    // Get the new view controller using segue.destinationViewController.
    // Pass the selected object to the new view controller.
    }
    */
}

extension WKWebView {
    func invalidateVisibleRect() {
        let contentOffset = scrollView.contentOffset
        scrollView.setContentOffset(CGPoint(x: contentOffset.x, y: contentOffset.y + 1), animated: true)
    }
}

extension ArticleViewController : UIScrollViewDelegate {
    func scrollViewDidScroll(scrollView: UIScrollView) {
        if let y = navigationController?.navigationBar.frame.origin.y {
            top.constant = y - 24
        }
    }
}